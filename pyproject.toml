[project]
name = "langmem"
version = "1.0.3"
description = "A Python SDK for Layered Memory Architecture with LangGraph - Human-like Memory for AI Agents"
readme = "README.md"
authors = [
    {name = "LangMem Contributors", email = "support@langmem.ai"}
]
maintainers = [
    {name = "LangMem Contributors", email = "support@langmem.ai"}
]
license = {text = "MIT"}
keywords = ["langchain", "langgraph", "memory", "ai", "llm", "agents", "vector-database", "cognitive-architecture"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database :: Database Engines/Servers",
]
requires-python = ">=3.11"
dependencies = [
    # Core LangGraph and LangChain
    "langgraph>=0.4.0",
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-openai>=0.2.0",
    "langchain-community>=0.3.0",
    # LLM APIs
    "openai>=1.0.0",
    "langchain_milvus>=0.2.1",
    # ML and embeddings
    "sentence-transformers>=3.0.0",
    # Database connectors
    "chromadb>=0.4.0",
    # Custom LangGraph extensions
    "lanngraph-wave-orchestrator>=1.1.7",
    "langgraph-cli[inmem]>=0.1.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.8.0",
    # HTTP and async
    "httpx>=0.25.0",
    "aiofiles>=23.0.0",
]

[project.urls]
Homepage = "https://github.com/langmem/langmem"
Documentation = "https://langmem.readthedocs.io"
Repository = "https://github.com/langmem/langmem"
Issues = "https://github.com/langmem/langmem/issues"
Changelog = "https://github.com/langmem/langmem/releases"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "langgraph-cli[inmem]>=0.1.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "pre-commit>=3.0.0",
]

production = [
    # Additional production databases
    "neo4j>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # Monitoring and logging
    "structlog>=23.0.0",
    "prometheus-client>=0.17.0",
]

# Entry points for CLI tools
[project.scripts]
langmem = "langmem.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.hatch.build.targets.wheel]
packages = ["langmem"]

[tool.hatch.build.targets.sdist]
include = [
    "/langmem",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

